Symantec versioning:
https://github.com/marketplace/actions/git-semantic-version
https://semver.org/



1. Docker:

Command : docker

Install on ubuntu:
https://docs.docker.com/engine/install/ubuntu/

# Add Docker's official GPG key:
sudo apt-get update
sudo apt-get install ca-certificates curl gnupg
sudo install -m 0755 -d /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
sudo chmod a+r /etc/apt/keyrings/docker.gpg

# Add the repository to Apt sources:
echo \
  "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update


sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin


Check Version:
docker --version

Check images:
docker images

check containers:
sudo docker ps

stopped container check:
sudo docker ps -a

run ubuntu:
docker run -it -d ubuntu:latest


check container  and images.

Lets dive into the container:

docker exec -it containerID /bin/bash


Stop the container:
docker ps
docker ps -a

Remove images:
docker images
docker rmi imagename


Save change to container:
docker exec -it -d ubuntu
docker exec -it containerID /bin/bash
apt-get update
apt-get install apache2
touch suhel.txt
exit container

Commit
sudo docker ps
sudo docker commit ContainerID repo/newimagename



Docker hub config:
https://hub.docker.com/

push to docker:
sudo docker login

docker push repo/newimagename



Dockerfile:
mkdir docker




index.html

<!DOCTYPE html>
<html>
    <head>
        <title>Example</title>
    </head>
    <body>
        <p>Hello DevOps.</p>
    </body>
</html>



vi Dockerfile:
FROM ubuntu:latest
RUN apt-get update -y
RUN apt-get -y install apache2
ADD . /var/www/html
ENV name DevOps
ENTRYPOINT apachectl -D FOREGROUND



Build Dockerfile:
sudo docker build -t repo/imagename:1.0.0 -f Dockerfile .

sudo docker images
sudo docker run -it -p 81:80 -d repo/imagename:1.0.0

check env variable:
sudo docker exec -it ContainerID bash
env




Docker storage:

- docker volume
- bind mount

docker volume create my-vol

mount:
docker run -it --mount source=<source=folder>,destination=<destination-folder> -d <container-name>

example:
docker run -it --mount source=my-vol,destination=/app -d ubuntu


bind mount:
docker run -it –v /home/ubuntu/hello:/app -d ubuntu


Linking:
$ docker run –it –name <name-of-container> --link <container-name> -d ubuntu

docker run -it --name container1 -d ubuntu

docker run -it --name container2 -d ubuntu --link container1

docker exec –it container2 bash
sudo apt-get update
apt-get install iputils-ping
ping container1




Monolithic vs microservices:




Dockerfile:




Additional:



Docker compose:


install docker compose:
sudo curl -L "https://github.com/docker/compose/releases/download/1.23.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose

sudo chmod +x /usr/local/bin/docker-compose

docker-compose --version

vi docker-compose.yml

version: '3'
services:
  sample1:
    image: httpd
    ports:
    - "5000:5000"
  sample2:
    image: nginx



docker-compose up -d

docker ps





Wordpress:

docker-compose.yaml

version: '3.3'
services:
  db:
    image: mysql:5.7
    volumes:
      - db_data:/var/lib/mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: somewordpress
      MYSQL_DATABASE: wordpress
      MYSQL_USER: wordpress
      MYSQL_PASSWORD: wordpress
  wordpress:
    depends_on:
      - db
    image: wordpress:latest
    ports:
      - "8000:80"
    restart: always
    environment:
      WORDPRESS_DB_HOST: db:3306
      WORDPRESS_DB_USER: wordpress
      WORDPRESS_DB_PASSWORD: wordpress
  volumes:
    db_data:


Docker-orachestration / Docker-swarm:


docker swarm init --advertise-addr=<ip-address-of-leader>



Services:
Creating a Service
docker service create --name <name-of-service> --replicas <number-of-replicas> <image-name>

docker service create --name apache --replicas 3 -p 80:80 hshar/webapp

Docker Network:
 - bridge
 - host
 - overlay
 - macvlan
 - none


Docker CLI:
https://docs.docker.com/engine/reference/commandline/docker/






Questions:


1. What is Docker ?
2. Difference between virtualisation and containerisation ?
3. Difference between RUN, CMD and Entrypoint
4. What if application has error, how do you troubleshoot ?
5. Without running a container , how do you troubleshoot image ?
6. What the best practice for docker file ?
   - never run as root user instead use a svc user with enough privilege
   - bare minimal build-essential pkg only
   - application run time libraries and binaries only
   - remove all unnecessary tools from binaries
   - Secure image with NO critical and high vunls
7. How to check docker image vunls ?
8. What is multi layer docker image ?




